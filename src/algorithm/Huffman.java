package algorithm;
import java.util.*;

/**
 * Clase que representa un Ã¡rbol de Huffman
 */

// construir arbol a partir de array
// decodificar
class HuffmanNode {

    int data;
    char c;

    HuffmanNode left, right;

}

class MyComparator implements Comparator<HuffmanNode> {

    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.frequency - y.frequency;
    }
}

public class Huffman {

    public static
    public static void printCode(HuffmanNode root, String s) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (    root.left == null &&
                root.right == null &&
                Character.isLetter(root.c)
        ) {
            // c is the character in the node
            System.out.println(root.c + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
}

    int frequency;
    char character;

    HuffmanNode left;
    HuffmanNode right;
}

}