package algorithm;
import java.util.*;

/**
 * Clase que representa un Ã¡rbol de Huffman
 */

// construir arbol a partir de array
// decodificar
class HuffmanNode {

    char character;
    int frequency;
    HuffmanNode left, right;

}

class MyComparator implements Comparator<HuffmanNode> {

    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.frequency - y.frequency;
    }
}

public class Huffman {

    public static HuffmanNode buildHuffmanTree(char[] characters, int[] frequencies) {
        int n = characters.length;
        PriorityQueue<HuffmanNode> q = new PriorityQueue<>(n, new MyComparator());

        // Create nodes for each character and add to priority queue
        for (int i = 0; i < n; i++) {
            HuffmanNode node = new HuffmanNode();
            node.character = characters[i];
            node.frequency = frequencies[i];
            node.left = null;
            node.right = null;
            q.add(node);
        }
        // Construct the Huffman tree by repeatedly merging nodes
        HuffmanNode root = null;
        while (q.size() > 1) {
            HuffmanNode x = q.peek();
            q.poll();
            HuffmanNode y = q.peek();
            q.poll();
            HuffmanNode f = new HuffmanNode();
            f.frequency = x.frequency + y.frequency;
            f.character = '-';
            f.left = x;
            f.right = y;
            root = f;
            q.add(f);
        }
        return root;
    }



    public static void printCode(HuffmanNode root, String s) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (    root.left == null &&
                root.right == null &&
                Character.isLetter(root.c)
        ) {
            // c is the character in the node
            System.out.println(root.c + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    public static String decode(HuffmanNode root, String encodedMessage) {
        StringBuilder decodedMessage = new StringBuilder();
        HuffmanNode current = root;

        for (int i = 0; i < encodedMessage.length(); i++) {
            char c = encodedMessage.charAt(i);
            if (c == '0') {
                current = current.left;
            } else if (c == '1') {
                current = current.right;
            }
            if (current.left == null && current.right == null) {
                decodedMessage.append(current.character);
                current = root;
            }
        }

        return decodedMessage.toString();
    }
}